import math
import ttkbootstrap as tb
from ttkbootstrap.constants import *

# === Variables ===
last_result = False
history = []

# === Button Click Handler ===
def click(event):
    global last_result
    text = event.widget.cget("text")
    current = screen_var.get()

    if last_result and text not in ["=", "CE", "‚Üê"]:
        screen_var.set("")
        current = ""
        last_result = False

    if text == "=":
        try:
            expression = current.replace("^", "**")
            result = str(eval(expression))
            screen_var.set(result)
            history.append(f"{current} = {result}")
            update_history()
            last_result = True
        except:
            screen_var.set("Error")
            last_result = True
    elif text == "CE":
        screen_var.set("")
    elif text == "‚Üê":
        screen_var.set(current[:-1])
    elif text in ["sin", "cos", "tan", "sqrt", "log"]:
        try:
            if current:
                num = float(current)
                functions = {
                    "sin": math.sin,
                    "cos": math.cos,
                    "tan": math.tan,
                    "sqrt": math.sqrt,
                    "log": math.log10,
                }
                result = functions[text](math.radians(num) if text in ["sin", "cos", "tan"] else num)
                screen_var.set(str(round(result, 8)))
                history.append(f"{text}({num}) = {round(result, 8)}")
                update_history()
                last_result = True
        except:
            screen_var.set("Error")
            last_result = True
    elif text == "œÄ":
        screen_var.set(current + str(round(math.pi, 8)))
    elif text == "e":
        screen_var.set(current + str(round(math.e, 8)))
    else:
        screen_var.set(current + text)

# === Theme Toggle ===
def toggle_theme():
    current = app.style.theme.name
    app.style.theme_use("darkly" if current == "flatly" else "flatly")

# === History Update ===
def update_history():
    history_box.config(state="normal")
    history_box.delete(1.0, "end")
    for h in history[-5:][::-1]:  # Show last 5 entries, newest on top
        history_box.insert("end", f"{h}\n")
    history_box.config(state="disabled")

# === UI Setup ===
app = tb.Window(themename="darkly")
app.title("Scientific Smart Calculator")
app.geometry("420x750")
app.resizable(False, False)

screen_var = tb.StringVar()
entry = tb.Entry(app, textvariable=screen_var, font=("Helvetica", 24), justify="right")
entry.pack(fill=BOTH, padx=10, pady=20, ipady=15)

# === Theme Toggle Button ===
theme_btn = tb.Button(app, text="üåó Toggle Theme", bootstyle="secondary", command=toggle_theme)
theme_btn.pack(pady=5)

# === Main Buttons ===
buttons = [
    ["CE", "‚Üê", "%", "/"],
    ["7", "8", "9", "*"],
    ["4", "5", "6", "-"],
    ["1", "2", "3", "+"],
    ["0", ".", "=", "^"]
]

# === Scientific Buttons ===
sci_buttons = [
    ["sin", "cos", "tan", "sqrt"],
    ["log", "œÄ", "e", ""]
]

frame = tb.Frame(app)
frame.pack()

# === Button Generator ===
def add_button(label, row, col, frame_ref, style="info-outline"):
    if label:
        btn = tb.Button(
            frame_ref,
            text=label,
            bootstyle=style,
            width=8,
            padding=10
        )
        btn.grid(row=row, column=col, padx=5, pady=5)
        btn.bind("<Enter>", lambda e: btn.configure(bootstyle=style.replace("-outline", "")))
        btn.bind("<Leave>", lambda e: btn.configure(bootstyle=style))
        btn.bind("<Button-1>", click)

for r, row in enumerate(buttons):
    for c, lbl in enumerate(row):
        add_button(lbl, r, c, frame, style="info-outline")

# === Scientific Buttons Frame ===
sci_frame = tb.Frame(app)
sci_frame.pack(pady=10)

for r, row in enumerate(sci_buttons):
    for c, lbl in enumerate(row):
        add_button(lbl, r, c, sci_frame, style="success-outline")

# === History Display ===
tb.Label(app, text="History (last 5):", font=("Helvetica", 12)).pack()
history_box = tb.Text(app, height=6, state="disabled", wrap="word", font=("Helvetica", 10))
history_box.pack(fill=BOTH, padx=10, pady=5)

# === Start App ===
app.mainloop()
