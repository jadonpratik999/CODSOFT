import tkinter as tk
from tkinter import ttk, messagebox
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Data setup (Indian Movies, Books, Products)
data = {
    "Movies": pd.DataFrame({
        "title": [
            "Inception", "The Matrix", "Interstellar", "The Prestige", "Memento",
            "Dangal", "3 Idiots", "Taare Zameen Par", "Swades", "Lagaan"
        ],
        "description": [
            "A thief uses dream-sharing technology to plant ideas.",
            "A computer hacker learns about the true nature of reality.",
            "A team travels through space and time to save humanity.",
            "Two rival magicians battle with illusions and secrets.",
            "A man with short-term memory loss seeks revenge.",
            "A wrestler trains his daughters to win gold for India.",
            "An engineering student questions the education system.",
            "A teacher inspires a child with dyslexia to succeed.",
            "An Indian engineer returns from the U.S. to serve rural India.",
            "Villagers play cricket against British to avoid taxes."
        ]
    }),
    "Books": pd.DataFrame({
        "title": [
            "1984", "Brave New World", "Fahrenheit 451", "The Handmaid's Tale", "Dune",
            "The White Tiger", "Train to Pakistan", "Midnight's Children", "Godaan", "Wings of Fire"
        ],
        "description": [
            "A dystopian society under constant surveillance.",
            "A futuristic world of genetically engineered citizens.",
            "A society where books are banned and burned.",
            "A woman's struggle in a theocratic regime.",
            "A desert planet where spice is the most valuable substance.",
            "A poor Indian driver climbs the social ladder through corruption.",
            "A tale of partition and communal violence in India.",
            "A magical journey through post-colonial India.",
            "A farmer's struggle against social injustice in rural India.",
            "The autobiography of APJ Abdul Kalam, India‚Äôs missile man."
        ]
    }),
    "Products": pd.DataFrame({
        "title": [
            "iPhone 13", "Samsung Galaxy", "MacBook Air", "Dell XPS", "Sony Headphones",
            "Boat Airdopes", "Redmi Note 12", "Tata Nexon EV", "Amul Dark Chocolate", "Prestige Pressure Cooker"
        ],
        "description": [
            "A smartphone with A15 Bionic chip and dual camera.",
            "A flagship Android phone with high refresh rate screen.",
            "Lightweight laptop with Apple M1 chip.",
            "High-performance ultrabook with sleek design.",
            "Noise cancelling headphones with superior sound.",
            "Wireless earbuds with powerful bass and long battery life.",
            "Affordable smartphone with powerful features.",
            "Electric SUV with impressive range and safety features.",
            "Indian dark chocolate with rich cocoa flavor.",
            "Durable pressure cooker for Indian kitchens."
        ]
    })
}

# Precompute similarities
similarity_data = {}
for category, df in data.items():
    tfidf = TfidfVectorizer(stop_words='english')
    tfidf_matrix = tfidf.fit_transform(df['description'])
    similarity = cosine_similarity(tfidf_matrix, tfidf_matrix)
    similarity_data[category] = similarity

# Recommendation logic
def get_recommendations(category, title):
    df = data[category]
    sim_matrix = similarity_data[category]
    titles = df['title'].tolist()
    if title not in titles:
        return ["‚ùå Item not found in database."]
    idx = titles.index(title)
    sim_scores = list(enumerate(sim_matrix[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:6]
    recommended = [df['title'][i[0]] for i in sim_scores]
    return recommended

# Advanced GUI
def launch_gui():
    root = tk.Tk()
    root.title("üîÆ AI Recommender System")
    root.geometry("800x600")
    root.configure(bg="#181818")

    # Style configuration
    style = ttk.Style()
    style.theme_use("clam")
    style.configure("TLabel", background="#181818", foreground="#ffffff", font=("Segoe UI", 12))
    style.configure("TCombobox", fieldbackground="#2e2e2e", background="#2e2e2e", foreground="#ffffff", font=("Segoe UI", 11))
    style.configure("TButton", background="#3a7bd5", foreground="#ffffff", font=("Segoe UI", 12, "bold"), padding=10)

    # Header Frame
    header = tk.Label(root, text="üîç Explore Recommendations", font=("Segoe UI", 20, "bold"), bg="#181818", fg="#00ffd2")
    header.pack(pady=20)

    # Main Frame
    frame = tk.Frame(root, bg="#232323", bd=2, relief="groove")
    frame.place(relx=0.5, rely=0.5, anchor="center", width=600, height=400)

    tk.Label(frame, text="Select Category", bg="#232323", fg="#ffffff", font=("Segoe UI", 12, "bold")).place(x=30, y=30)
    category_var = tk.StringVar(value="Movies")
    category_cb = ttk.Combobox(frame, textvariable=category_var, values=list(data.keys()), state="readonly", width=30)
    category_cb.place(x=200, y=30)

    tk.Label(frame, text="Select Item", bg="#232323", fg="#ffffff", font=("Segoe UI", 12, "bold")).place(x=30, y=80)
    title_var = tk.StringVar()
    title_cb = ttk.Combobox(frame, textvariable=title_var, values=data["Movies"]['title'].tolist(), state="readonly", width=30)
    title_cb.place(x=200, y=80)

    def update_titles(*args):
        selected = category_var.get()
        title_cb['values'] = data[selected]['title'].tolist()
        title_var.set(data[selected]['title'][0])

    category_var.trace_add("write", update_titles)

    result_box = tk.Text(frame, bg="#1e1e1e", fg="#00ffaa", font=("Consolas", 11), wrap="word", bd=0)
    result_box.place(x=30, y=150, width=530, height=180)

    def recommend():
        cat = category_var.get()
        title = title_var.get()
        if not title:
            messagebox.showwarning("Input Missing", "Please select a valid item.")
            return
        results = get_recommendations(cat, title)
        result_box.delete(1.0, tk.END)
        result_box.insert(tk.END, f"üìå Based on '{title}', we recommend:\n\n")
        for item in results:
            result_box.insert(tk.END, f"üîπ {item}\n")

    recommend_btn = tk.Button(frame, text="‚ú® Recommend", bg="#3a7bd5", fg="white", font=("Segoe UI", 12, "bold"), command=recommend)
    recommend_btn.place(x=230, y=350)

    root.mainloop()

launch_gui()
